name: NPM 发布

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "preRelease"
        required: true
        default: "beta"
        type: choice
        options:
          - "release"
          - "beta"
          - "rc"
      version_increment:
        description: "版本增量"
        required: true
        default: "patch"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"
      dry_run:
        description: "预演模式（仅预览，不实际发布）"
        required: true
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  npm-release:
    name: NPM 发布
    runs-on: ubuntu-latest
    concurrency:
      group: npm-release-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 执行 NPM 发布流程
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # 构建 release-it 命令
          RELEASE_CMD="npx release-it"

          # 根据版本类型选择配置和参数
          if [ "${{ github.event.inputs.version_type }}" = "release" ]; then
            # 正式版
            RELEASE_CMD="$RELEASE_CMD ${{ github.event.inputs.version_increment }}"
          else
            # 预发布版
            RELEASE_CMD="$RELEASE_CMD ${{ github.event.inputs.version_increment }} --preRelease=${{ github.event.inputs.version_type }} --config .release-it.prerelease.json"
          fi

          # 添加预演模式
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --dry-run"
            echo "👀 预演模式已启用"
          fi

          echo "📋 执行命令: $RELEASE_CMD"

          # 执行发布命令
          eval $RELEASE_CMD
