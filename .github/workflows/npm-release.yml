name: NPM 发布

on:
  workflow_dispatch:
    inputs:
      version:
        description: "发布版本号 (例如: 1.0.0, 1.0.0-beta.1, patch, minor, major)"
        required: false
        default: ""
        type: string
      dry_run:
        description: "预演模式（仅预览，不实际发布）"
        required: true
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  npm-release:
    name: NPM 发布
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      version: ${{ steps.get_release_info.outputs.version }}
      release_completed: ${{ steps.release_it.outputs.release_completed }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置发版参数
        id: setup_release
        run: |
          echo "手动触发 NPM 发布"
          echo "预演模式: ${{ github.event.inputs.dry_run }}"
          echo "指定版本: ${{ github.event.inputs.version }}"

          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 配置 Git 用户
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 执行发版
        id: release_it
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # 设置发版参数
          RELEASE_ARGS=""

          # 检查是否为预演模式
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 预演模式：仅预览，不实际发布"
            RELEASE_ARGS="$RELEASE_ARGS --dry-run"
          fi

          # 检查是否指定了版本号
          if [ -n "${{ steps.setup_release.outputs.version }}" ]; then
            VERSION="${{ steps.setup_release.outputs.version }}"
            echo "📌 使用指定版本号: $VERSION"
            RELEASE_ARGS="$RELEASE_ARGS $VERSION"
          else
            echo "📈 使用自动版本号递增"
          fi

          # 设置非交互模式
          RELEASE_ARGS="$RELEASE_ARGS --ci"

          echo "🚀 开始执行 release-it..."
          echo "参数: $RELEASE_ARGS"

          # 执行 release-it
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            npx release-it $RELEASE_ARGS --npm.publish=false
          else
            npx release-it $RELEASE_ARGS
            echo "release_completed=true" >> $GITHUB_OUTPUT
          fi

      - name: 获取发布版本信息
        if: success() && github.event.inputs.dry_run != 'true' && steps.release_it.outputs.release_completed == 'true'
        id: get_release_info
        run: |
          # 从 package.json 获取最新版本号
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 发布版本: v$VERSION"

          # 输出相关链接
          echo "🎉 发版完成！"
          echo "📦 NPM: https://www.npmjs.com/package/xiaozhi-client/v/$VERSION"
          echo "🏷️ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo "📋 Changelog: https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md"
