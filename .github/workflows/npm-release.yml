name: NPM 发布

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "发布类型"
        required: true
        default: "beta"
        type: choice
        options:
          - "release-patch" # 正式版 patch
          - "release-minor" # 正式版 minor
          - "release-major" # 正式版 major
          - "beta-patch" # Beta 预发布 patch
          - "beta-minor" # Beta 预发布 minor
          - "beta-major" # Beta 预发布 major
          - "rc-patch" # RC 预发布 patch
          - "rc-minor" # RC 预发布 minor
          - "rc-major" # RC 预发布 major
      dry_run:
        description: "预演模式"
        required: true
        default: true
        type: boolean

permissions:
  contents: read

jobs:
  npm-release:
    name: NPM 发布
    runs-on: ubuntu-latest
    concurrency:
      group: npm-release-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 验证
        run: |
          echo "当前分支: ${{ github.ref_name }}"
          echo "发布类型: ${{ github.event.inputs.release_type }}"
          echo "预演模式: ${{ github.event.inputs.dry_run }}"

          # 检查是否在主分支
          if [[ "${{ github.event.inputs.release_type }}" == "release-"* ]] && [ "${{ github.ref_name }}" != "main" ] && [ "${{ github.ref_name }}" != "master" ]; then
            if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
              echo "❌ 正式版发布必须在主分支进行"
              exit 1
            fi
          fi

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 解析发布参数
        id: parse-release
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"

          if [[ "$RELEASE_TYPE" == "release-"* ]]; then
            # 正式版发布
            VERSION_TYPE="release"
            VERSION_INCREMENT="${RELEASE_TYPE#release-}"
            PRERELEASE_ID=""
          elif [[ "$RELEASE_TYPE" == "beta-"* ]]; then
            # Beta 预发布版
            VERSION_TYPE="prerelease"
            VERSION_INCREMENT="${RELEASE_TYPE#beta-}"
            PRERELEASE_ID="beta"
          elif [[ "$RELEASE_TYPE" == "rc-"* ]]; then
            # RC 预发布版
            VERSION_TYPE="prerelease"
            VERSION_INCREMENT="${RELEASE_TYPE#rc-}"
            PRERELEASE_ID="rc"
          else
            # 兜底处理
            VERSION_TYPE="prerelease"
            VERSION_INCREMENT="patch"
            PRERELEASE_ID="beta"
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "version_increment=$VERSION_INCREMENT" >> $GITHUB_OUTPUT
          echo "prerelease_id=$PRERELEASE_ID" >> $GITHUB_OUTPUT

      - name: 发布
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          RELEASE_CMD="npx release-it"

          if [ "${{ steps.parse-release.outputs.version_type }}" = "release" ]; then
            # 正式版发布
            RELEASE_CMD="$RELEASE_CMD ${{ steps.parse-release.outputs.version_increment }}"
          else
            # 预发布版发布
            RELEASE_CMD="$RELEASE_CMD ${{ steps.parse-release.outputs.version_increment }} --preRelease=${{ steps.parse-release.outputs.prerelease_id }}"
          fi

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --dry-run"
          fi

          echo "执行命令: $RELEASE_CMD"
          eval $RELEASE_CMD
