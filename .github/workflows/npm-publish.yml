name: NPM 发布

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: "目标版本号 (例如: 1.0.0, 1.0.0-beta.0, 1.0.0-rc.0)"
        required: true
        type: string
      dry_run:
        description: "预演模式"
        required: true
        default: true
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  npm-release:
    name: NPM 发布
    runs-on: ubuntu-latest
    concurrency:
      group: npm-release-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 验证
        run: |
          echo "当前分支: ${{ github.ref_name }}"
          echo "目标版本: ${{ github.event.inputs.target_version }}"
          echo "预演模式: ${{ github.event.inputs.dry_run }}"

          # 验证版本号格式
          TARGET_VERSION="${{ github.event.inputs.target_version }}"
          if [[ ! "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(beta|rc)\.[0-9]+)?$ ]]; then
            echo "❌ 版本号格式无效，请使用以下格式之一："
            echo "   - 正式版: 1.0.0"
            echo "   - Beta版: 1.0.0-beta.0"
            echo "   - RC版: 1.0.0-rc.0"
            exit 1
          fi

          # 检查分支权限（允许在feature分支进行测试发布）
          if [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            if [ "${{ github.ref_name }}" != "main" ]; then
              echo "❌ 正式版发布必须在主分支进行"
              exit 1
            fi
          fi

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: 安装依赖
        run: |
          npm install -g npm@latest
          pnpm install --frozen-lockfile

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 解析版本号参数
        id: parse-version
        run: |
          TARGET_VERSION="${{ github.event.inputs.target_version }}"

          if [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # 正式版: 1.0.0
            VERSION_TYPE="release"
            PRERELEASE_ID=""
            echo "检测到正式版版本号: $TARGET_VERSION"
          elif [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
            # Beta 版: 1.0.0-beta.0
            VERSION_TYPE="prerelease"
            PRERELEASE_ID="beta"
            echo "检测到Beta版本号: $TARGET_VERSION"
          elif [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
            # RC 版: 1.0.0-rc.0
            VERSION_TYPE="prerelease"
            PRERELEASE_ID="rc"
            echo "检测到RC版本号: $TARGET_VERSION"
          else
            echo "❌ 版本号格式无法识别"
            exit 1
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "prerelease_id=$PRERELEASE_ID" >> $GITHUB_OUTPUT

      - name: 🔒 安全审计检查
        run: |
          pnpm audit --audit-level moderate

      - name: 发布
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"
          RELEASE_CMD="npx release-it --ci"

          if [ "${{ steps.parse-version.outputs.version_type }}" = "release" ]; then
            # 正式版发布
            RELEASE_CMD="$RELEASE_CMD -i $TARGET_VERSION"
          else
            # 预发布版发布
            RELEASE_CMD="$RELEASE_CMD $TARGET_VERSION --preRelease=${{ steps.parse-version.outputs.prerelease_id }}"
          fi

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --dry-run"
          fi

          echo "📦 开始发布流程..."
          echo "📋 版本信息："
          echo "   - 目标版本: $TARGET_VERSION"
          echo "   - 版本类型: ${{ steps.parse-version.outputs.version_type }}"
          echo "   - 预发布ID: ${{ steps.parse-version.outputs.prerelease_id }}"
          echo "   - 当前分支: ${{ github.ref_name }}"
          echo "   - 预演模式: ${{ github.event.inputs.dry_run }}"
          echo "   - 执行命令: $RELEASE_CMD"
          echo ""

          # 检查环境
          echo "🔍 环境检查："
          echo "   - Node版本: $(node --version)"
          echo "   - pnpm版本: $(pnpm --version)"
          echo "   - Git状态: $(git status --porcelain | wc -l) 个文件有修改"
          echo "   - 当前分支: $(git branch --show-current)"
          echo "   - 最新标签: $(git describe --tags --match='v*' --abbrev=0 || echo '无标签')"
          echo ""

          # 执行发布命令
          echo "🚀 执行发布命令..."
          eval $RELEASE_CMD

          # 检查执行结果
          if [ $? -eq 0 ]; then
          exit_code=$?

          # 检查执行结果
          if [ $exit_code -eq 0 ]; then
            echo "✅ 发布命令执行成功"
          else
            echo "❌ 发布命令执行失败，错误码: $exit_code"
